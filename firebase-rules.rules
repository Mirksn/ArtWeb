rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Allow public read access to paintings
    match /paintings/{paintingId} {
      allow read: if true;
      // Only allow admins to create, update, or delete paintings
      allow create, update, delete: if isAdmin();
      
      // Validate painting data on write
      allow write: if isAdmin() && 
                    request.resource.data.keys().hasAll(['name', 'price', 'image', 'type']) &&
                    request.resource.data.name is string &&
                    request.resource.data.price is number &&
                    request.resource.data.image is string &&
                    request.resource.data.type is string;
    }
    
    // Allow users to read/write their own cart
    match /carts/{userId} {
      allow read, write: if isOwner(userId);
      
      // Validate cart data structure
      allow create, update: if isOwner(userId) &&
                             request.resource.data.keys().hasAll(['userId', 'items']) &&
                             request.resource.data.userId == userId &&
                             request.resource.data.items is list;
    }
    
    // Allow users to read/write their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      
      // Only allow users to update their own data, and prevent them from making themselves admin
      allow update: if isOwner(userId) && 
                     (!('isAdmin' in request.resource.data) || 
                      request.resource.data.isAdmin == resource.data.isAdmin);
      
      // Allow user creation with validation
      allow create: if isOwner(userId) &&
                     request.resource.data.keys().hasAll(['username', 'email']) &&
                     (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false);
    }
    
    // Orders collection rules
    match /orders/{orderId} {
      // Allow users to read their own orders and admins to read all orders
      allow read: if isAuthenticated() && 
                   (isAdmin() || resource.data.userId == request.auth.uid);
      
      // Allow authenticated users to create orders (for themselves only)
      allow create: if isAuthenticated() &&
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.keys().hasAll(['userId', 'items', 'total', 'date']);
      
      // Only admins can update or delete orders
      allow update, delete: if isAdmin();
    }
  }
} 